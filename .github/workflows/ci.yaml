---
name: ci

on: # yamllint disable-line rule:truthy rule:comments
  push:
    branches:
      - main

  pull_request:
    branches:
      - main

  workflow_dispatch:

jobs:
  cabal:
    strategy:
      fail-fast: false
      matrix:
        ghc:
          - "9.2.8"
          - "9.4.8"
          - "9.6.5"
          - "9.8.2"
          - "9.10.1"
          - "9.12.1"
        os:
          - "macos-latest"
          - "ubuntu-latest"
          - "windows-latest"
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - uses: haskell-actions/setup@v2
        with:
          ghc-version: ${{ matrix.ghc }}

      - name: Configure
        # yamllint disable rule:line-length
        run: cabal configure --enable-tests --ghc-options='-Wno-deprecations -Werror'
        # yamllint enable

      # In general, list libs in alphabetical order though we break this rule
      # when a later dep (name) l is a dependency of an earlier one e, since we
      # want build errors to be as specific as possible i.e. a build error for
      # l should be reported in its step, not as part of e's.

      - name: Build effects-async
        run: cabal build effects-async

      - name: Build effects-env
        run: cabal build effects-env

      - name: Build effects-fs
        run: cabal build effects-fs

      - name: Test effects-fs
        run: cabal test effects-fs

      - name: Build effects-haskeline
        run: cabal build effects-haskeline

      - name: Build effects-ioref
        run: cabal build effects-ioref

      - name: Build effects-logger
        run: cabal build effects-logger

      - name: Test effects-logger
        run: |
          cabal test effects-logger --test-options '--hedgehog-tests 100000'

      - name: Build effects-optparse
        run: cabal build effects-optparse

      - name: Build effects-stm
        run: cabal build effects-stm

      - name: Build effects-terminal
        run: cabal build effects-terminal

      - name: Build effects-thread
        run: cabal build effects-thread

      - name: Build effects-time
        run: cabal build effects-time

      - name: Test effects-time
        run: cabal test effects-time --test-options '--hedgehog-tests 100000'

      - name: Build effects-typed-process
        run: cabal build effects-typed-process

      - name: Build effects-unix
        if: ${{ matrix.os != 'windows-latest' }}
        run: cabal build effects-unix

      - name: Test effects-unix
        if: ${{ matrix.os != 'windows-latest' }}
        run: cabal test effects-unix

      - name: Build effects-unix-compat
        run: cabal build effects-unix-compat

      - name: Test effects-unix-compat
        run: cabal test effects-unix-compat

      - name: Benchmark effects-fs/unix
        if: ${{ matrix.os == 'ubuntu-latest' }}
        id: bench
        run: |
          cabal bench --enable-benchmarks fs-unix:benchmark:benchmarks --benchmark-options '
            +RTS -T -RTS -t100
            --baseline bench/baseline_${{ matrix.os }}_${{ matrix.ghc }}_ci.csv
            --csv bench/bench_${{ matrix.os }}_${{ matrix.ghc }}_ci.csv
            --svg bench/bench_${{ matrix.os }}_${{ matrix.ghc }}_ci.svg
            --fail-if-slower 30
            --fail-if-faster 30'

      - uses: actions/upload-artifact@v4
        if: ${{ failure() && steps.bench.conclusion == 'failure' }}
        with:
          name: build-artifacts
          path: |
            bench/fs-unix/bench/bench_${{ matrix.os }}_${{ matrix.ghc }}_ci.csv
            bench/fs-unix/bench/bench_${{ matrix.os }}_${{ matrix.ghc }}_ci.svg
  nix:
    strategy:
      fail-fast: false
      matrix:
        os:
          - "macos-latest"
          - "ubuntu-latest"
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup nix
        uses: cachix/install-nix-action@v30
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Build effects-async
        run: nix build -Lv .#effects-async

      - name: Build effects-env
        run: nix build -Lv .#effects-env

      - name: Build effects-fs
        run: nix build -Lv .#effects-fs

      - name: Build effects-haskeline
        run: nix build -Lv .#effects-haskeline

      - name: Build effects-ioref
        run: nix build -Lv .#effects-ioref

      - name: Build effects-logger
        run: nix build -Lv .#effects-logger

      - name: Build effects-optparse
        run: nix build -Lv .#effects-optparse

      - name: Build effects-stm
        run: nix build -Lv .#effects-stm

      - name: Build effects-terminal
        run: nix build -Lv .#effects-terminal

      - name: Build effects-thread
        run: nix build -Lv .#effects-thread

      - name: Build effects-time
        run: nix build -Lv .#effects-time

      - name: Build effects-typed-process
        run: nix build -Lv .#effects-typed-process

      - name: Build effects-unix
        run: nix build -Lv .#effects-unix

      - name: Build effects-unix-compat
        run: nix build -Lv .#effects-unix-compat
  lint:
    runs-on: "ubuntu-latest"
    steps:
      - uses: actions/checkout@v4

      - name: Setup nix
        uses: cachix/install-nix-action@v30
        with:
          github_access_token: ${{ secrets.GITHUB_TOKEN }}
          nix_path: nixpkgs=channel:nixos-unstable

      - name: Formatting
        run: |
          nix run .#format
          git diff --exit-code --color=always
